:q
:q
:hoogle null
null
:q
tail []
head []
:q
:hoogle getArgs
:hoogle getArgs
tail $ tail x
:hoogle pop
pop
pop x
x = [1,2..]
:q
head [1,2..]
head [1..]
head [1,..]
head [1,2,..]
fst
fst [1,2..]
fst [1..]
[1,2..]
..
[1,2,3, ...]
[1,2]
[1,2,...]
[1,2,..]
fst [1...]
fst [1 ..]
:hoogle getArgs
:q
main
main
:r
:hoogle IO Str
:hoogle IO 
main
main "sdfsad\n"
main
:l test_io.hs 
:q
show t
t
t = Node 1 [Node 2 [], Node 3 []]
t
t = Node 1 []
:m Data.Tree 
:q
t = Node 1 [Node 2 [], Node 3 [Nil, Nil] ]
t
t = Node 1 [Nil,  Nil]
data Tree a = Nil | Node a [Tree a]
:q
:q
f 1
f
f = \x -> x+1
x :: String
:set -XUnicodeSyntax 
:q
:info do
:hoogle! do
:hoogle do
:q
:hoogle map
hoogle
:hoogle map
(hoogle map)
hoogle $ map
hoogle map
:q
:q
:q
:q
:!hoogle map
:hoogle map
hoogle fst
hoogle (+)
:show language
:show bindings
:help
hoogle 
hodoc 4
hdoc
hoogle "show"
show (+)
show 1
sho 1
show map
hoogle $ show map
:!hoogle "map"
hoogle mapM
hoogle?
hoogle map
